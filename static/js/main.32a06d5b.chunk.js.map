{"version":3,"sources":["components/Sidebar/Sidebar.js","components/Header/Header.js","components/web/utils.js","components/BodyContainer/BodyContainer.js","components/BodyContainer/Staking/stakePool.js","App.js","index.js"],"names":["Sidebar","truncate","fullStr","strLen","separator","length","charsToShow","frontChars","Math","ceil","backChars","floor","substr","getCookie","name","dc","document","cookie","prefix","begin","indexOf","end","decodeURI","substring","gettronweb","window","tronWeb","defaultAddress","base58","accountADDR","inputField","querySelector","console","log","addr","inputFieldsb","innerHTML","value","days","expires","date","Date","setTime","getTime","toUTCString","setCookie","button","className","onClick","React","Component","Header","src","alt","sidebar","classList","contains","remove","add","TronWeb","require","fullHost","providers","HttpProvider","StakePool","tokenAddr","contractAdr","useState","Frozen","setFrozen","setAddr","lprewards","setLPrewards","Smrewards","setSmrewards","setlpLogged","bal","setBalance","curWeb","a","lpLogged","initRewards","curAddr","decimals","contract","at","viewUserTotalUnclaimedRewards","call","transaction","poolSid","pool","poolId","BigNumber","toNumber","sm","smrewards","pow","LP","isStaker","tronweb","isPool","tx","frozenBalance","getFrozenBalance","approve","amount","pid","parseInt","send","stake","balance","approveSafeMoney","parameter","type","transactionBuilder","triggerConstantContract","unStake","unstake","claimRewards","setTimeout","initWindow","Grid","container","spacing","justify","item","xs","md","Card","variant","CardContent","Typography","color","gutterBottom","CardActions","size","href","height","width","id","placeholder","App","exact","path","options","position","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","ReactDOM","render","StrictMode","template","AlertTemplate","getElementById"],"mappings":"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","file":"static/js/main.32a06d5b.chunk.js","sourcesContent":["import \"./__sidebar.scss\";\r\nimport React from \"react\";\r\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\r\nexport class Sidebar extends React.Component {\r\n  render() {\r\n    var truncate = function (fullStr, strLen, separator) {\r\n      if (fullStr.length <= strLen) return fullStr;\r\n\r\n      separator = separator || \"...\";\r\n\r\n      var sepLen = separator.length,\r\n        charsToShow = strLen - sepLen,\r\n        frontChars = Math.ceil(charsToShow / 2),\r\n        backChars = Math.floor(charsToShow / 2);\r\n\r\n      return (\r\n        fullStr.substr(0, frontChars) +\r\n        separator +\r\n        fullStr.substr(fullStr.length - backChars)\r\n      );\r\n    };\r\n    function getCookie(name) {\r\n      var dc = document.cookie;\r\n      var prefix = name + \"=\";\r\n      var begin = dc.indexOf(\"; \" + prefix);\r\n      if (begin === -1) {\r\n        begin = dc.indexOf(prefix);\r\n        if (begin != 0) return null;\r\n      } else {\r\n        begin += 2;\r\n        var end = document.cookie.indexOf(\";\", begin);\r\n        if (end === -1) {\r\n          end = dc.length;\r\n        }\r\n      }\r\n      // because unescape has been deprecated, replaced with decodeURI\r\n      //return unescape(dc.substring(begin + prefix.length, end));\r\n      return decodeURI(dc.substring(begin + prefix.length, end));\r\n    }\r\n    function eraseCookie(name) {\r\n      document.cookie =\r\n        name + \"=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;\";\r\n    }\r\n    function logOutACC() {\r\n      eraseCookie(\"accountAddr\");\r\n      var inputFieldsb = document.querySelector(\".register-767273-pc\");\r\n      var inputField = document.querySelector(\".register-767273\");\r\n      inputField.innerHTML = \"Connect\";\r\n      inputFieldsb.innerHTML = \"Connect\";\r\n    }\r\n\r\n    function setCookie(name, value, days) {\r\n      var expires = \"\";\r\n      if (days) {\r\n        var date = new Date();\r\n        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\r\n        expires = \"; expires=\" + date.toUTCString();\r\n      }\r\n      document.cookie = name + \"=\" + (value || \"\") + expires + \"; path=/\";\r\n    }\r\n    function gettronweb() {\r\n      if (getCookie(\"accountAddr\") === null) {\r\n        if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n          var accountADDR = window.tronWeb.defaultAddress.base58;\r\n          var inputField = document.querySelector(\".register-767273\");\r\n          console.log(inputField);\r\n          var addr = truncate(accountADDR, 9, \".....\");\r\n          var inputFieldsb = document.querySelector(\".register-767273-pc\");\r\n          inputField.innerHTML = addr;\r\n          inputFieldsb.innerHTML = addr;\r\n          setCookie(\"accountAddr\", accountADDR, 5);\r\n        }\r\n      } else {\r\n        console.log(\"noy empty\");\r\n      }\r\n    }\r\n    if (getCookie(\"accountAddr\") === null) {\r\n      var button = (\r\n        <a className=\"register-767273-pc\" onClick={gettronweb}>\r\n          Connect\r\n        </a>\r\n      );\r\n    } else {\r\n      const accountADDR = getCookie(\"accountAddr\");\r\n      const addr = truncate(accountADDR, 9, \".....\");\r\n      var button = (\r\n        <a className=\"register-767273-pc\" onClick={gettronweb}>\r\n          {addr}\r\n        </a>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"Sidebar\">\r\n        <div className=\"sidebar-main\">\r\n          <div className=\"register-01d6f6\">{button}</div>\r\n          <div className=\"register-01d6f6\">\r\n            {\" \"}\r\n            <a className=\"register-767273-pc\" onClick={logOutACC}>\r\n              Log out\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import \"./__header.scss\";\r\nimport React from \"react\";\r\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\r\nexport class Header extends React.Component {\r\n  render() {\r\n    var loggedIN = false;\r\n    var truncate = function (fullStr, strLen, separator) {\r\n      if (fullStr.length <= strLen) return fullStr;\r\n\r\n      separator = separator || \"...\";\r\n\r\n      var sepLen = separator.length,\r\n        charsToShow = strLen - sepLen,\r\n        frontChars = Math.ceil(charsToShow / 2),\r\n        backChars = Math.floor(charsToShow / 2);\r\n\r\n      return (\r\n        fullStr.substr(0, frontChars) +\r\n        separator +\r\n        fullStr.substr(fullStr.length - backChars)\r\n      );\r\n    };\r\n    function setCookie(name, value, days) {\r\n      var expires = \"\";\r\n      if (days) {\r\n        var date = new Date();\r\n        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\r\n        expires = \"; expires=\" + date.toUTCString();\r\n      }\r\n      document.cookie = name + \"=\" + (value || \"\") + expires + \"; path=/\";\r\n    }\r\n    function getCookie(name) {\r\n      var dc = document.cookie;\r\n      var prefix = name + \"=\";\r\n      var begin = dc.indexOf(\"; \" + prefix);\r\n      if (begin === -1) {\r\n        begin = dc.indexOf(prefix);\r\n        if (begin != 0) return null;\r\n      } else {\r\n        begin += 2;\r\n        var end = document.cookie.indexOf(\";\", begin);\r\n        if (end === -1) {\r\n          end = dc.length;\r\n        }\r\n      }\r\n      // because unescape has been deprecated, replaced with decodeURI\r\n      //return unescape(dc.substring(begin + prefix.length, end));\r\n      return decodeURI(dc.substring(begin + prefix.length, end));\r\n    }\r\n    function eraseCookie(name) {\r\n      document.cookie =\r\n        name + \"=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;\";\r\n    }\r\n    function toggleSidebar() {\r\n      var sidebar = document.querySelector(\".Sidebar\");\r\n      if (sidebar.classList.contains(\"active\")) {\r\n        sidebar.classList.remove(\"active\");\r\n      } else {\r\n        sidebar.classList.add(\"active\");\r\n      }\r\n    }\r\n    function gettronweb() {\r\n      if (getCookie(\"accountAddr\") === null) {\r\n        if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n          loggedIN = true;\r\n          var accountADDR = window.tronWeb.defaultAddress.base58;\r\n          var inputField = document.querySelector(\".register-767273\");\r\n          console.log(inputField);\r\n          var addr = truncate(accountADDR, 9, \".....\");\r\n          inputField.innerHTML = addr;\r\n          setCookie(\"accountAddr\", accountADDR, 5);\r\n        }\r\n      } else {\r\n        console.log(\"noy empty\");\r\n      }\r\n    }\r\n    if (getCookie(\"accountAddr\") === null) {\r\n      var button = (\r\n        <a className=\"register-767273\" onClick={gettronweb}>\r\n          Connect\r\n        </a>\r\n      );\r\n    } else {\r\n      const accountADDR = getCookie(\"accountAddr\");\r\n      const addr = truncate(accountADDR, 9, \".....\");\r\n      var button = (\r\n        <a className=\"register-767273\" onClick={gettronweb}>\r\n          {addr}\r\n        </a>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"Header\">\r\n        <div className=\"logo-f125d6\">\r\n          <img src=\"images/LOGO.png\" alt=\"PSRS\" />\r\n        </div>\r\n        <div className=\"menu-01d6f6\">\r\n          <div className=\"menu-toggle-86fad\">\r\n            <img\r\n              onClick={toggleSidebar}\r\n              src=\"images/svg/menu-toggle.svg\"\r\n              alt=\"menu\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"register-01d6f6\">{button}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export const PSRS_TOKEN = \"TFXX6gSzYFhy1wEbvZhS75G2g3JM1pgc8t\";\r\n\r\nexport function getTronWeb() {\r\n  if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n    return window.tronWeb;\r\n  }\r\n  return null;\r\n}\r\nexport const EXCHANGE_ABI = {\r\n  entrys: [\r\n    {\r\n      outputs: [{ name: \"balance_trc20\", type: \"uint256\" }],\r\n      constant: true,\r\n      inputs: [{ name: \"token_address\", type: \"address\" }],\r\n      name: \"TRC20Balance\",\r\n      stateMutability: \"View\",\r\n      type: \"Function\"\r\n    },\r\n    {\r\n      outputs: [{ type: \"address\" }],\r\n      constant: true,\r\n      name: \"PooledAddress\",\r\n      stateMutability: \"View\",\r\n      type: \"Function\"\r\n    },\r\n    {\r\n      outputs: [{ type: \"bool\" }],\r\n      constant: true,\r\n      name: \"StakeStatus\",\r\n      stateMutability: \"View\",\r\n      type: \"Function\"\r\n    },\r\n    {\r\n      outputs: [{ name: \"status\", type: \"bool\" }],\r\n      name: \"StartUnFreeze\",\r\n      stateMutability: \"Nonpayable\",\r\n      type: \"Function\"\r\n    },\r\n    {\r\n      outputs: [{ type: \"bool\" }],\r\n      inputs: [\r\n        { name: \"_staker\", type: \"address\" },\r\n        { name: \"_amount\", type: \"uint256\" },\r\n        { name: \"_seconds\", type: \"uint256\" }\r\n      ],\r\n      name: \"AddStaker\",\r\n      stateMutability: \"Nonpayable\",\r\n      type: \"Function\"\r\n    },\r\n    {\r\n      outputs: [{ name: \"amount_withdraw\", type: \"uint256\" }],\r\n      inputs: [{ name: \"receiver\", type: \"address\" }],\r\n      name: \"WithdrawAllTRX\",\r\n      stateMutability: \"Nonpayable\",\r\n      type: \"Function\"\r\n    },\r\n    {\r\n      outputs: [{ type: \"uint256\" }],\r\n      constant: true,\r\n      name: \"MinFreeze\",\r\n      stateMutability: \"View\",\r\n      type: \"Function\"\r\n    },\r\n    {\r\n      outputs: [{ type: \"bool\" }],\r\n      name: \"SetUnavailable\",\r\n      stateMutability: \"Nonpayable\",\r\n      type: \"Function\"\r\n    },\r\n    {\r\n      outputs: [{ type: \"bool\" }],\r\n      inputs: [{ name: \"_minfreeze\", type: \"uint256\" }],\r\n      name: \"UpdateConfig\",\r\n      stateMutability: \"Nonpayable\",\r\n      type: \"Function\"\r\n    },\r\n    {\r\n      outputs: [{ type: \"bool\" }],\r\n      name: \"SetActive\",\r\n      stateMutability: \"Nonpayable\",\r\n      type: \"Function\"\r\n    },\r\n    { name: \"ClaimReward\", stateMutability: \"Nonpayable\", type: \"Function\" },\r\n    {\r\n      outputs: [{ type: \"uint256\" }],\r\n      constant: true,\r\n      name: \"UnavailableAt\",\r\n      stateMutability: \"View\",\r\n      type: \"Function\"\r\n    },\r\n    {\r\n      outputs: [\r\n        { name: \"FreezeBalance\", type: \"uint256\" },\r\n        { name: \"FreezeStart\", type: \"uint256\" }\r\n      ],\r\n      constant: true,\r\n      inputs: [{ type: \"address\" }],\r\n      name: \"StakersInfo\",\r\n      stateMutability: \"View\",\r\n      type: \"Function\"\r\n    },\r\n    { name: \"StartFreeze\", stateMutability: \"Nonpayable\", type: \"Function\" },\r\n    {\r\n      outputs: [{ name: \"amount_trc20_withdraw\", type: \"uint256\" }],\r\n      inputs: [\r\n        { name: \"receiver\", type: \"address\" },\r\n        { name: \"token_address\", type: \"address\" },\r\n        { name: \"token_decimal\", type: \"uint256\" },\r\n        { name: \"amount_withdraw\", type: \"uint256\" }\r\n      ],\r\n      name: \"WithdrawTokenTRC20\",\r\n      stateMutability: \"Nonpayable\",\r\n      type: \"Function\"\r\n    },\r\n    {\r\n      outputs: [{ name: \"balance_trx\", type: \"uint256\" }],\r\n      constant: true,\r\n      name: \"TRXBalance\",\r\n      stateMutability: \"View\",\r\n      type: \"Function\"\r\n    },\r\n    {\r\n      outputs: [{ name: \"_amount\", type: \"uint256\" }],\r\n      constant: true,\r\n      name: \"GetTotalReward\",\r\n      stateMutability: \"View\",\r\n      type: \"Function\"\r\n    },\r\n    {\r\n      inputs: [{ name: \"token\", type: \"address\" }],\r\n      stateMutability: \"Nonpayable\",\r\n      type: \"Constructor\"\r\n    },\r\n    {\r\n      inputs: [\r\n        { name: \"staker\", type: \"address\" },\r\n        { name: \"amount\", type: \"uint256\" },\r\n        { name: \"timeFreeze\", type: \"uint256\" }\r\n      ],\r\n      name: \"Freeze\",\r\n      type: \"Event\"\r\n    },\r\n    {\r\n      inputs: [\r\n        { name: \"staker\", type: \"address\" },\r\n        { name: \"amount\", type: \"uint256\" },\r\n        { name: \"timeClaim\", type: \"uint256\" }\r\n      ],\r\n      name: \"Claim\",\r\n      type: \"Event\"\r\n    },\r\n    {\r\n      inputs: [\r\n        { name: \"staker\", type: \"address\" },\r\n        { name: \"amount\", type: \"uint256\" }\r\n      ],\r\n      name: \"Unfreeze\",\r\n      type: \"Event\"\r\n    }\r\n  ]\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { getTronWeb } from \"../web/utils\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport { Box, Link, makeStyles, Grid } from \"@material-ui/core\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport \"./__body.scss\";\r\nimport { useAlert } from \"react-alert\";\r\nconst TronWeb = require(\"tronweb\");\r\nconst fullNode = \"https://api.shasta.trongrid.io\";\r\nconst tronWeb = new TronWeb({ fullHost: \"https://api.trongrid.io\" });\r\n// This provider is optional, you can just use a url for the nodes instead\r\nconst HttpProvider = TronWeb.providers.HttpProvider;\r\n\r\nexport const BodyContainer = () => {\r\n  const [isLiquidity, setIsLiquidity] = useState(true);\r\n\r\n  const handleOnLiquidityStaking = () => {\r\n    setIsLiquidity(true);\r\n  };\r\n  const alert = useAlert();\r\n\r\n  const [publicAddress, setPublicAddress] = useState(\"\");\r\n  const [lpBalance, setLPBalance] = useState(0);\r\n  const [lprewards, setLPrewards] = useState(0);\r\n  const [lpLogged, setlpLogged] = useState(true);\r\n  const [lpFroze, setlpfroze] = useState(true);\r\n  const handleOnTokenBaking = () => {\r\n    setIsLiquidity(false);\r\n  };\r\n  let curWeb = getTronWeb();\r\n  function initWindow() {\r\n    if (curWeb == null) {\r\n      setlpLogged((lpLogged) => false);\r\n    } else {\r\n      setlpLogged((lpLogged) => true);\r\n    }\r\n  }\r\n  async function approveAndcall(amount) {\r\n    if (publicAddress != null) {\r\n      console.log(amount);\r\n\r\n      let curAddr = curWeb.defaultAddress.base58;\r\n      if (true) {\r\n        try {\r\n          var trc = \"TUB36fG5eRGSM634Lw6P3TTimjLRP8xqjj\";\r\n\r\n          var trc = \"TUB36fG5eRGSM634Lw6P3TTimjLRP8xqjj\";\r\n          var contract = await curWeb\r\n            .contract()\r\n            .at(\"TFXX6gSzYFhy1wEbvZhS75G2g3JM1pgc8t\");\r\n          await contract.approve(trc, amount).send();\r\n          await apAdd(amount);\r\n\r\n          // console.log(transaction.transaction);\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  async function apAdd(amount) {\r\n    let curAddr = curWeb.defaultAddress.base58;\r\n\r\n    var contract = await curWeb\r\n      .contract()\r\n      .at(\"TUB36fG5eRGSM634Lw6P3TTimjLRP8xqjj\");\r\n    var transaction = await contract.StartFreeze().send();\r\n    console.log(transaction);\r\n  }\r\n\r\n  async function initStaker(amount) {\r\n    alert.show(\"Trx May be charged.\");\r\n    amount = amount * Math.pow(10, 8);\r\n    console.log(amount);\r\n    var ac = amount + lpFroze * Math.pow(10, 8);\r\n\r\n    if (curWeb != null) {\r\n      // var amounts = lpFroze * 100000000;\r\n      // amounts = parseInt(amounts);\r\n\r\n      let curAddr = curWeb.defaultAddress.base58;\r\n      setPublicAddress((publicAddress) => curAddr);\r\n      if (true) {\r\n        await approveAndcall(amount);\r\n\r\n        try {\r\n          // tronWeb.setAddress(curAddr);\r\n          // var contract = await curWeb\r\n          //   .contract()\r\n          //   .at(\"TUB36fG5eRGSM634Lw6P3TTimjLRP8xqjj\");\r\n          // var transaction = await contract.StartFreeze().send({\r\n          //   from: curAddr\r\n          // });\r\n          // console.log(transaction);\r\n          // var transaction = await contract.StartFreeze().send();\r\n          // console.log(transaction);\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  async function startFreeze() {\r\n    if (curWeb != null) {\r\n      let curAddr = curWeb.defaultAddress.base58;\r\n      setPublicAddress((publicAddress) => curAddr);\r\n      if (true) {\r\n        try {\r\n          tronWeb.setAddress(\"TUB36fG5eRGSM634Lw6P3TTimjLRP8xqjj\");\r\n          var contract = await tronWeb\r\n            .contract()\r\n            .at(\"TUB36fG5eRGSM634Lw6P3TTimjLRP8xqjj\");\r\n          var transaction = await contract\r\n            .AddStaker(curAddr, amount, time)\r\n            .call();\r\n          const signedTransaction = await curWeb.trx.sign(\r\n            transaction.transaction\r\n          );\r\n          if (!signedTransaction.signature) {\r\n            return console.error(\"Transaction was not signed properly\");\r\n          }\r\n          const broadcast = await curWeb.trx.sendRawTransaction(\r\n            signedTransaction\r\n          );\r\n        } catch (err) {}\r\n      }\r\n    }\r\n  }\r\n  async function initFroze() {\r\n    if (curWeb != null) {\r\n      let curAddr = curWeb.defaultAddress.base58;\r\n      setPublicAddress((publicAddress) => curAddr);\r\n      if (true) {\r\n        try {\r\n          tronWeb.setAddress(\"TUB36fG5eRGSM634Lw6P3TTimjLRP8xqjj\");\r\n          var contract = await tronWeb\r\n            .contract()\r\n            .at(\"TUB36fG5eRGSM634Lw6P3TTimjLRP8xqjj\");\r\n          var transaction = await contract.StakersInfo(curAddr).call();\r\n          let LP = curWeb.BigNumber(transaction[\"FreezeBalance\"][\"_hex\"]);\r\n          setlpfroze((lpFroze) => LP.toNumber() / Math.pow(10, 8));\r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  async function initRewards() {\r\n    if (curWeb != null) {\r\n      let curAddr = curWeb.defaultAddress.base58;\r\n      setPublicAddress((publicAddress) => curAddr);\r\n      if (true) {\r\n        tronWeb.setAddress(curAddr);\r\n        var contract = await tronWeb\r\n          .contract()\r\n          .at(\"TUB36fG5eRGSM634Lw6P3TTimjLRP8xqjj\");\r\n        var transaction = await contract.GetTotalReward().call();\r\n        let LP = curWeb.BigNumber(transaction[\"_amount\"][\"_hex\"]);\r\n        setLPrewards((lprewards) => LP.toNumber() / Math.pow(10, 8));\r\n      }\r\n    }\r\n  }\r\n  async function unFreeze() {\r\n    if (curWeb != null) {\r\n      let curAddr = curWeb.defaultAddress.base58;\r\n      setPublicAddress((publicAddress) => curAddr);\r\n      if (true) {\r\n        try {\r\n          tronWeb.setAddress(curAddr);\r\n          var contract = await curWeb\r\n            .contract()\r\n            .at(\"TUB36fG5eRGSM634Lw6P3TTimjLRP8xqjj\");\r\n          var transaction = await contract.StartUnFreeze().send();\r\n          console.log(transaction);\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  async function unClaim() {\r\n    if (curWeb != null) {\r\n      let curAddr = curWeb.defaultAddress.base58;\r\n      setPublicAddress((publicAddress) => curAddr);\r\n      if (true) {\r\n        try {\r\n          var amount = lprewards * Math.pow(10, 8);\r\n          amount = parseInt(amount);\r\n          var contract = await curWeb\r\n            .contract()\r\n            .at(\"TUB36fG5eRGSM634Lw6P3TTimjLRP8xqjj\");\r\n          var transaction = await contract.ClaimReward().send({\r\n            from: curAddr,\r\n            to: curAddr\r\n          });\r\n          console.log(transaction);\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const initBalance = async () => {\r\n    if (curWeb != null) {\r\n      let curAddr = curWeb.defaultAddress.base58;\r\n      setPublicAddress((publicAddress) => curAddr);\r\n      if (true) {\r\n        var functionSelector = \"balanceOf(address)\";\r\n\r\n        var parameter = [\r\n          {\r\n            type: \"address\",\r\n            value: curAddr\r\n          }\r\n        ];\r\n\r\n        let transaction = await curWeb.transactionBuilder.triggerConstantContract(\r\n          \"TFXX6gSzYFhy1wEbvZhS75G2g3JM1pgc8t\",\r\n          functionSelector,\r\n          {},\r\n          parameter\r\n        );\r\n        let LP = curWeb.BigNumber(\"0x\" + transaction[\"constant_result\"][0]);\r\n        setLPBalance((lpBalance) => LP.toNumber() / Math.pow(10, 8));\r\n      }\r\n    } else {\r\n      setlpLogged((lpLogged) => false);\r\n    }\r\n  };\r\n  async function handleApprove() {\r\n    var amount = document.querySelector(\"#Amount\").value;\r\n    amount = parseInt(amount);\r\n    if (Number.isInteger(amount) == true) {\r\n      if (amount >= 10) {\r\n        await initStaker(amount);\r\n      } else {\r\n        alert.show(\"Minimum amount 10 PSRS.\");\r\n      }\r\n    } else {\r\n      alert.show(\"Enter A valid number\");\r\n    }\r\n  }\r\n  var truncate = function (fullStr, strLen, separator) {\r\n    if (fullStr.length <= strLen) return fullStr;\r\n\r\n    separator = separator || \"...\";\r\n\r\n    var sepLen = separator.length,\r\n      charsToShow = strLen - sepLen,\r\n      frontChars = Math.ceil(charsToShow / 2),\r\n      backChars = Math.floor(charsToShow / 2);\r\n\r\n    return (\r\n      fullStr.substr(0, frontChars) +\r\n      separator +\r\n      fullStr.substr(fullStr.length - backChars)\r\n    );\r\n  };\r\n  const addressMod = truncate(publicAddress, 28, \".....\");\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      minWidth: 200\r\n    },\r\n    bullet: {\r\n      display: \"inline-block\",\r\n      margin: \"0 2px\",\r\n      transform: \"scale(0.8)\"\r\n    },\r\n    title: {\r\n      fontSize: 14\r\n    },\r\n    pos: {\r\n      marginBottom: 12\r\n    }\r\n  });\r\n  const classes = useStyles();\r\n  const bull = <span className={classes.bullet}>•</span>;\r\n  useEffect(() => {\r\n    var interval = setInterval(() => {\r\n      initBalance();\r\n      initFroze();\r\n      initWindow();\r\n      initRewards();\r\n    }, 2000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  return (\r\n    <div className=\"min-scale\">\r\n      {lpLogged === true ? (\r\n        <Grid container spacing={2} className=\"gridContainer\" justify=\"center\">\r\n          <Grid className=\"grid-layout\" item xs={12} sm={4} md={6}>\r\n            <Card className=\"card-component\" variant=\"outlined\">\r\n              <CardContent>\r\n                <div className=\"header\">\r\n                  <Typography\r\n                    className=\"title\"\r\n                    color=\"textSecondary\"\r\n                    gutterBottom\r\n                  >\r\n                    General\r\n                  </Typography>\r\n                </div>\r\n\r\n                <div className=\"content\">\r\n                  <ul>\r\n                    <li>\r\n                      <p className=\"active\">\r\n                        <span>Wallet&nbsp;:&nbsp;</span>\r\n                        <span>{addressMod}</span>\r\n                      </p>\r\n                    </li>\r\n                    <li>\r\n                      <p className=\"active\">\r\n                        <span>PSRS&nbsp;Balance&nbsp;:&nbsp;</span>\r\n                        <span>{lpBalance} PSRS</span>\r\n                      </p>\r\n                    </li>\r\n                    <li>\r\n                      <p className=\"active\">\r\n                        <span>Frozen&nbsp;Balance&nbsp;:&nbsp;</span>\r\n                        <span>{lpFroze} PSRS</span>\r\n                      </p>\r\n                    </li>\r\n                    <li>\r\n                      <p className=\"active\">\r\n                        <span>Available&nbsp;To use&nbsp;:&nbsp;</span>\r\n                        <span>{lpBalance} PSRS</span>\r\n                      </p>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </CardContent>\r\n              <CardActions>\r\n                <a size=\"small\" href=\"https://app.psrsfinance.com\">\r\n                  Visit Our site\r\n                </a>\r\n              </CardActions>\r\n              <CardActions>\r\n                <a size=\"small\" href=\"#stakeHere\">\r\n                  Stake Psrs\r\n                </a>\r\n              </CardActions>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid\r\n            id=\"Instructions\"\r\n            className=\"grid-layout\"\r\n            item\r\n            xs={12}\r\n            sm={4}\r\n            md={6}\r\n          >\r\n            <Card className=\"card-component\" variant=\"outlined\">\r\n              <CardContent>\r\n                <div className=\"header\">\r\n                  <Typography\r\n                    className=\"title\"\r\n                    color=\"textSecondary\"\r\n                    gutterBottom\r\n                  >\r\n                    Information\r\n                  </Typography>\r\n                </div>\r\n\r\n                <div className=\"content\">\r\n                  <ul>\r\n                    <li className=\"Instruct\">\r\n                      <p>\r\n                        1. You will be charged trx in case your energy is less\r\n                        for each transaction.\r\n                      </p>\r\n                    </li>\r\n                    <li className=\"Instruct\">\r\n                      <p>\r\n                        2. If you have already freezed some amount of PSRS and\r\n                        want to stake more pls make sure that you have claimed\r\n                        rewards.\r\n                      </p>\r\n                    </li>\r\n                    <li className=\"Instruct\">\r\n                      <p>\r\n                        2. If you ever have any issue in staking,unstaking and\r\n                        claiming rewards just report it in our offical telegram\r\n                        group.\r\n                      </p>\r\n                    </li>\r\n                    <li className=\"Instruct\">\r\n                      <p>\r\n                        2. Sometimes transactions will fail in case you have\r\n                        less or no bandwidth make sure you have enough bandwidth\r\n                        and enough trx for covering transaction fees.\r\n                      </p>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid\r\n            id=\"stakeHere\"\r\n            className=\"grid-layout\"\r\n            item\r\n            xs={12}\r\n            sm={4}\r\n            md={6}\r\n          >\r\n            <Card className=\"card-component\" variant=\"outlined\">\r\n              <CardContent>\r\n                <div className=\"header\">\r\n                  <Typography\r\n                    className=\"title\"\r\n                    color=\"textSecondary\"\r\n                    gutterBottom\r\n                  >\r\n                    Stake\r\n                  </Typography>\r\n                </div>\r\n\r\n                <div className=\"content\">\r\n                  <ul>\r\n                    <li>\r\n                      <p className=\"active\">\r\n                        <span>Wallet&nbsp;:&nbsp;</span>\r\n                        <span>{addressMod}</span>\r\n                      </p>\r\n                    </li>{\" \"}\r\n                    <li>\r\n                      <p className=\"active\">\r\n                        <span>Current&nbsp;Rewards&nbsp;:&nbsp;</span>\r\n                        <span>{lprewards} PSRS</span>\r\n                      </p>\r\n                    </li>\r\n                    <li>\r\n                      <button type=\"button\" onClick={unClaim}>\r\n                        Claim Rewards\r\n                      </button>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </CardContent>\r\n              <CardActions>\r\n                <form className=\"witholdForm\">\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"Amount\"\r\n                    placeholder=\"Enter the amount\"\r\n                  />\r\n                  <button type=\"button\" onClick={handleApprove}>\r\n                    Approve & Freeze\r\n                  </button>\r\n                  <button type=\"button\" onClick={unFreeze}>\r\n                    Unstake\r\n                  </button>\r\n                  <small>\r\n                    Note: Staking is in maintanence so you cannot stake more\r\n                    psrs until maintanence. You can unstack and claim your\r\n                    rewards.\r\n                  </small>\r\n                </form>\r\n              </CardActions>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      ) : (\r\n        <Grid container spacing={2} className=\"gridContainer\" justify=\"center\">\r\n          <Grid className=\"grid-layout\" item xs={12} sm={4} md={6}>\r\n            <Card className=\"card-component\" variant=\"outlined\">\r\n              <CardContent>\r\n                <div className=\"header\">\r\n                  <Typography\r\n                    className=\"title\"\r\n                    color=\"textSecondary\"\r\n                    gutterBottom\r\n                  >\r\n                    General\r\n                  </Typography>\r\n                </div>\r\n\r\n                <div className=\"content\">\r\n                  <ul>\r\n                    <li>\r\n                      <span className=\"expert active\">\r\n                        You are not allowed to perform this action. Are you\r\n                        using dapp browser with tron mainnet?\r\n                      </span>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Pools */}\r\n        </Grid>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport { Box, Link, makeStyles, Grid } from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"../__body.scss\";\nimport \"./stake.scss\";\nimport { useAlert } from \"react-alert\";\nconst TronWeb = require(\"tronweb\");\nconst fullNode = \"https://api.shasta.trongrid.io\";\n// const tronWeb = new TronWeb({ fullHost: \"https://api.trongrid.io\" });\n// This provider is optional, you can just use a url for the nodes instead\nconst HttpProvider = TronWeb.providers.HttpProvider;\n\nexport const StakePool = () => {\n  const tokenAddr = \"TFXX6gSzYFhy1wEbvZhS75G2g3JM1pgc8t\";\n  const contractAdr = \"TPviS8dc5bpyWC3U2uDPbLWJjDcGqy1q56\";\n  // const tokenAddr = \"TPBnw4m4vmb2PQMX3qYmgxcwmpjDJz7vyK\";\n  // const contractAdr = \"TSHGuWZ1XpRbyr9m56QwF33zp4u6KMBoAy\";\n  const [Frozen, setFrozen] = useState(0);\n  const [isLiquidity, setIsLiquidity] = useState(true);\n  const [addr, setAddr] = useState(\"\");\n  const [lprewards, setLPrewards] = useState(0);\n  const [Smrewards, setSmrewards] = useState(0);\n\n  const handleOnLiquidityStaking = () => {\n    setIsLiquidity(true);\n  };\n\n  const [lpLogged, setlpLogged] = useState(true);\n  const [bal, setBalance] = useState(0);\n  let curWeb = window.tronWeb;\n\n  async function initWindow() {\n    if (curWeb == null) {\n      setlpLogged((lpLogged) => false);\n    } else {\n      setlpLogged((lpLogged) => true);\n      setAddr((addr) => curWeb.defaultAddress.base58);\n    }\n  }\n  async function initRewards() {\n    if (curWeb != null) {\n      let curAddr = curWeb.defaultAddress.base58;\n      if (true) {\n        var decimals = document.querySelector(\"#decimals01\").value;\n\n        var contract = await curWeb.contract().at(contractAdr);\n        var transaction = await contract\n          .viewUserTotalUnclaimedRewards(curAddr)\n          .call();\n        var pool = await contract.poolSid().call();\n        let poolId = curWeb.BigNumber(pool[\"_hex\"]);\n        if (poolId.toNumber() == 0) {\n          let sm = curWeb.BigNumber(transaction[\"_hex\"]);\n          setSmrewards((smrewards) => sm.toNumber() / Math.pow(10, decimals));\n        }\n        if (poolId.toNumber() == 1) {\n          let LP = curWeb.BigNumber(transaction[\"_hex\"]);\n          setLPrewards((lprewards) => LP.toNumber() / Math.pow(10, decimals));\n        }\n      }\n    }\n  }\n  const isStaker = async () => {\n    if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n      var tronweb = window.tronWeb;\n\n      let pool = await tronweb.contract().at(contractAdr);\n      var tx = await pool.isPool().call();\n      return tx;\n    }\n  };\n  const frozenBalance = async () => {\n    if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n      var tronweb = window.tronWeb;\n\n      let pool = await tronweb.contract().at(contractAdr);\n      var tx = await pool.getFrozenBalance().call();\n      setFrozen((Frozen) => tx / Math.pow(10, 8));\n    }\n  };\n  const approve = async () => {\n    if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n      if ((await isStaker()) == false) {\n        var amount = document.querySelector(\"#Amount01\").value;\n        var pid = 0;\n        var decimals = 8;\n        amount = parseInt(amount);\n        decimals = parseInt(decimals);\n        pid = parseInt(pid);\n        amount = amount * Math.pow(10, decimals);\n        if (amount >= 10000000000) {\n          var tronweb = window.tronWeb;\n\n          let contract = await tronweb.contract().at(tokenAddr);\n\n          var tx = await contract.approve(contractAdr, amount).send();\n\n          console.log(tx);\n          let pool = await tronweb.contract().at(contractAdr);\n          var tx = await pool.stake(amount, pid).send();\n          balance();\n          console.log(tx);\n        } else {\n          console.log(\"Minimum 100 psrs\");\n        }\n      } else {\n        console.log(\"Error\");\n      }\n    }\n  };\n  const approveSafeMoney = async () => {\n    if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n      if ((await isStaker()) == false) {\n        var amount = document.querySelector(\"#Amount02\").value;\n        var pid = 1;\n        var decimals = 8;\n        amount = parseInt(amount);\n        decimals = parseInt(decimals);\n        pid = parseInt(pid);\n        amount = amount * Math.pow(10, decimals);\n        if (amount >= 10000000000) {\n          var tronweb = window.tronWeb;\n\n          let contract = await tronweb.contract().at(tokenAddr);\n\n          var tx = await contract.approve(contractAdr, amount).send();\n\n          console.log(tx);\n          let pool = await tronweb.contract().at(contractAdr);\n          var tx = await pool.stake(amount, pid).send();\n          await balance();\n          await initRewards();\n        } else {\n          console.log(\"Minimum 100 psrs\");\n        }\n      } else {\n        console.log(\"Error\");\n      }\n    }\n  };\n  const balance = async () => {\n    if (curWeb != null) {\n      let curAddr = curWeb.defaultAddress.base58;\n      if (true) {\n        var functionSelector = \"balanceOf(address)\";\n\n        var parameter = [\n          {\n            type: \"address\",\n            value: curAddr\n          }\n        ];\n\n        let transaction = await curWeb.transactionBuilder.triggerConstantContract(\n          tokenAddr,\n          functionSelector,\n          {},\n          parameter\n        );\n        let LP = curWeb.BigNumber(\"0x\" + transaction[\"constant_result\"][0]);\n        setBalance((bal) => LP.toNumber() / Math.pow(10, 8));\n      }\n    } else {\n      setlpLogged((lpLogged) => false);\n    }\n  };\n  async function unStake() {\n    if (curWeb != null) {\n      let curAddr = curWeb.defaultAddress.base58;\n      if (true) {\n        var contract = await curWeb.contract().at(contractAdr);\n        var transaction = await contract.unstake().send();\n        balance();\n        frozenBalance();\n        initRewards();\n      }\n    }\n  }\n  async function Claim() {\n    if (curWeb != null) {\n      let curAddr = curWeb.defaultAddress.base58;\n      if (true) {\n        var contract = await curWeb.contract().at(contractAdr);\n        var transaction = await contract.claimRewards().send();\n        balance();\n        frozenBalance();\n        initRewards();\n      }\n    }\n  }\n  async function approveAndcall(amount, pid, decimals) {\n    console.log(amount);\n\n    let curAddr = curWeb.defaultAddress.base58;\n    if (true) {\n      try {\n        var contract = await curWeb.contract().at(tokenAddr);\n\n        await contract.approve(contractAdr, amount).send();\n        await apAdd(amount, pid, decimals);\n\n        // console.log(transaction.transaction);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n\n  async function apAdd(amount, pid, decimals) {\n    let curAddr = curWeb.defaultAddress.base58;\n    amount = amount / Math.pow(10, decimals);\n\n    var contract = await curWeb.contract().at(contractAdr);\n    var transaction = await contract.stake(amount, pid).send();\n    console.log(transaction);\n  }\n\n  async function initStaker(amount, pid, decimals) {\n    amount = amount * Math.pow(10, decimals);\n    console.log(amount);\n\n    if (curWeb != null) {\n      // var amounts = lpFroze * 100000000;\n      // amounts = parseInt(amounts);\n\n      let curAddr = curWeb.defaultAddress.base58;\n      if (true) {\n        await approveAndcall(amount, pid, decimals);\n\n        try {\n          // tronWeb.setAddress(curAddr);\n          // var contract = await curWeb\n          //   .contract()\n          //   .at(\"TUB36fG5eRGSM634Lw6P3TTimjLRP8xqjj\");\n          // var transaction = await contract.StartFreeze().send({\n          //   from: curAddr\n          // });\n          // console.log(transaction);\n          // var transaction = await contract.StartFreeze().send();\n          // console.log(transaction);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n    }\n  }\n  async function handleApproveJust() {\n    var amount = document.querySelector(\"#Amount01\").value;\n    var pid = document.querySelector(\"#pid01\").value;\n    var decimals = document.querySelector(\"#decimals01\").value;\n    amount = parseInt(amount);\n    decimals = parseInt(decimals);\n    pid = parseInt(pid);\n    console.log(pid);\n    console.log(amount);\n    if (Number.isInteger(amount) == true) {\n      if (amount >= 10) {\n        await initStaker(amount, pid, decimals);\n      } else {\n      }\n    } else {\n    }\n  }\n  async function handleApproveSafeMoney() {\n    var amount = document.querySelector(\"#Amount02\").value;\n    var pid = document.querySelector(\"#pid02\").value;\n    var decimals = document.querySelector(\"#decimals02\").value;\n    amount = parseInt(amount);\n    decimals = 8;\n    pid = parseInt(pid);\n    console.log(pid);\n    console.log(amount);\n    if (Number.isInteger(amount) == true) {\n      if (amount >= 10) {\n        await initStaker(amount, pid, decimals);\n      } else {\n      }\n    } else {\n    }\n  }\n\n  setTimeout(function () {\n    initWindow();\n    balance();\n    initRewards();\n    frozenBalance();\n  }, 3000);\n  return (\n    <div className=\"min-scale\">\n      <Grid container spacing={2} className=\"gridContainer\" justify=\"center\">\n        <Grid className=\"grid-layout\" item xs={12} sm={4} md={6}>\n          <Card className=\"card-component\" variant=\"outlined\">\n            <CardContent>\n              <div className=\"header\">\n                <Typography\n                  className=\"title\"\n                  color=\"textSecondary\"\n                  gutterBottom\n                >\n                  General\n                </Typography>\n              </div>\n\n              <div className=\"content\">\n                <ul>\n                  <li>\n                    <p className=\"active\">\n                      <span>Wallet&nbsp;:&nbsp;</span>\n                      <span>{addr}</span>\n                    </p>\n                  </li>\n                  <li>\n                    <p className=\"active\">\n                      <span>PSRS&nbsp;Balance&nbsp;:&nbsp;</span>\n                      <span>{bal} PSRS</span>\n                    </p>\n                  </li>\n                </ul>\n              </div>\n            </CardContent>\n            <CardActions>\n              <a size=\"small\" href=\"https://app.psrsfinance.com\">\n                Visit Our site\n              </a>\n            </CardActions>\n            <CardActions>\n              <a onClick={unStake} size=\"small\" href=\"#stakeHere\">\n                UnStake Psrs\n              </a>\n            </CardActions>\n            <CardActions>\n              <a onClick={Claim} size=\"small\" href=\"#stakeHere\">\n                Claim Rewards\n              </a>\n            </CardActions>\n          </Card>\n        </Grid>\n        <Grid className=\"grid-layout\" item xs={12} sm={4} md={6}>\n          <Card className=\"card-component\" variant=\"outlined\">\n            <CardContent>\n              <div className=\"header\">\n                <Typography\n                  className=\"title\"\n                  color=\"textSecondary\"\n                  gutterBottom\n                >\n                  Just Money\n                </Typography>\n              </div>\n\n              <div className=\"content\">\n                <ul>\n                  <li>\n                    <p className=\"active\">\n                      <span>Wallet&nbsp;:&nbsp;</span>\n                      <span>{addr}</span>\n                    </p>\n                  </li>\n                  <li>\n                    <p className=\"active\">\n                      <span>Frozen PSRS(In all pools)&nbsp;:&nbsp;</span>\n                      <span>{Frozen} PSRS</span>\n                    </p>\n                  </li>\n                  <li>\n                    <p className=\"active justmoney\">\n                      <span>Claimable&nbsp;Balance&nbsp;:&nbsp;</span>\n                      <span>\n                        {lprewards}{\" \"}\n                        <img\n                          height=\"26\"\n                          width=\"26\"\n                          src=\"https://i.ibb.co/BL4Bc1J/TT8-Vk-Sk-W6igki-Rs-V5-Wi-Jg-Lrsb-Vw-Y5b-LLj-A.png\"\n                        />\n                        JustMoney(JM)\n                      </span>\n                    </p>\n                  </li>\n                </ul>\n              </div>\n            </CardContent>\n\n            <CardActions>\n              <form className=\"witholdForm\">\n                <input\n                  type=\"text\"\n                  id=\"Amount01\"\n                  placeholder=\"Enter the amount\"\n                />\n                <button type=\"button\" onClick={approve}>\n                  Approve & Freeze\n                </button>\n                <input type=\"hidden\" value=\"8\" id=\"decimals01\" />\n\n                <input type=\"hidden\" value=\"0\" id=\"pid01\" />\n                <button type=\"button\" onClick={unStake}>\n                  Unstake Psrs\n                </button>\n              </form>\n            </CardActions>\n          </Card>\n        </Grid>\n        <Grid className=\"grid-layout\" item xs={12} sm={4} md={6}>\n          <Card className=\"card-component\" variant=\"outlined\">\n            <CardContent>\n              <div className=\"header\">\n                <Typography\n                  className=\"title\"\n                  color=\"textSecondary\"\n                  gutterBottom\n                >\n                  Safe Money\n                </Typography>\n              </div>\n\n              <div className=\"content\">\n                <ul>\n                  <li>\n                    <p className=\"active\">\n                      <span>Wallet&nbsp;:&nbsp;</span>\n                      <span>{addr}</span>\n                    </p>\n                  </li>\n                  <li>\n                    <p className=\"active\">\n                      <span>Frozen PSRS(In all pools)&nbsp;:&nbsp;</span>\n                      <span>{Frozen} PSRS</span>\n                    </p>\n                  </li>\n                  <li>\n                    <p className=\"active justmoney\">\n                      <span>Claimable&nbsp;Balance&nbsp;:&nbsp;</span>\n                      <span>\n                        {Smrewards}{\" \"}\n                        <img\n                          height=\"26\"\n                          width=\"26\"\n                          src=\"https://i.ibb.co/BL4Bc1J/TT8-Vk-Sk-W6igki-Rs-V5-Wi-Jg-Lrsb-Vw-Y5b-LLj-A.png\"\n                        />\n                        SafeMoney(SM)\n                      </span>\n                    </p>\n                  </li>\n                </ul>\n              </div>\n            </CardContent>\n\n            <CardActions>\n              <form className=\"witholdForm\">\n                <input\n                  type=\"text\"\n                  id=\"Amount02\"\n                  placeholder=\"Enter the amount\"\n                />\n                <button type=\"button\" onClick={approveSafeMoney}>\n                  Approve & Freeze\n                </button>\n                <input type=\"hidden\" value=\"8\" id=\"decimals01\" />\n\n                <input type=\"hidden\" value=\"0\" id=\"pid01\" />\n                <button type=\"button\" onClick={unStake}>\n                  Unstake Psrs\n                </button>\n              </form>\n            </CardActions>\n          </Card>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n","import \"./styles.css\";\nimport React from \"react\";\nimport { Sidebar } from \"./components/Sidebar/Sidebar\";\nimport { Header } from \"./components/Header/Header\";\nimport { BodyContainer } from \"./components/BodyContainer/BodyContainer\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { StakePool } from \"./components/BodyContainer/Staking/stakePool\";\n\nconst App = () => {\n  return (\n    <Router>\n      <div>\n        <div className=\"Container-main\">\n          <div className=\"header-container-sdax5f\">\n            <Header />\n          </div>\n          <div className=\"main\">\n            <div>\n              <Sidebar />\n            </div>\n\n            <main>\n              <Router>\n                <Route exact path=\"/\">\n                  <StakePool />\n                </Route>\n                <Route exact path=\"/pool\">\n                  <StakePool />\n                </Route>\n              </Router>\n            </main>\n          </div>\n        </div>\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n      </div>\n    </Router>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport App from \"./App.js\";\nimport { render } from \"react-dom\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { transitions, positions, Provider as AlertProvider } from \"react-alert\";\nimport AlertTemplate from \"react-alert-template-oldschool-dark\";\nconst options = {\n  // you can also just use 'bottom center'\n  position: positions.BOTTOM_CENTER,\n  timeout: 5000,\n  offset: \"30px\",\n  // you can also just use 'scale'\n  transition: transitions.SCALE\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <AlertProvider template={AlertTemplate} {...options}>\n      <App />\n    </AlertProvider>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}